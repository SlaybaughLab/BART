// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: material.proto

#ifndef PROTOBUF_INCLUDED_material_2eproto
#define PROTOBUF_INCLUDED_material_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_material_2eproto 

namespace protobuf_material_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_material_2eproto
class Material;
class MaterialDefaultTypeInternal;
extern MaterialDefaultTypeInternal _Material_default_instance_;
class Material_MatrixProperty;
class Material_MatrixPropertyDefaultTypeInternal;
extern Material_MatrixPropertyDefaultTypeInternal _Material_MatrixProperty_default_instance_;
class Material_ScalarProperty;
class Material_ScalarPropertyDefaultTypeInternal;
extern Material_ScalarPropertyDefaultTypeInternal _Material_ScalarProperty_default_instance_;
class Material_VectorProperty;
class Material_VectorPropertyDefaultTypeInternal;
extern Material_VectorPropertyDefaultTypeInternal _Material_VectorProperty_default_instance_;
namespace google {
namespace protobuf {
template<> ::Material* Arena::CreateMaybeMessage<::Material>(Arena*);
template<> ::Material_MatrixProperty* Arena::CreateMaybeMessage<::Material_MatrixProperty>(Arena*);
template<> ::Material_ScalarProperty* Arena::CreateMaybeMessage<::Material_ScalarProperty>(Arena*);
template<> ::Material_VectorProperty* Arena::CreateMaybeMessage<::Material_VectorProperty>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Material_ScalarId {
  Material_ScalarId_UNKNOWN_SCALAR = 0,
  Material_ScalarId_DENSITY = 1,
  Material_ScalarId_Material_ScalarId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Material_ScalarId_Material_ScalarId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Material_ScalarId_IsValid(int value);
const Material_ScalarId Material_ScalarId_ScalarId_MIN = Material_ScalarId_UNKNOWN_SCALAR;
const Material_ScalarId Material_ScalarId_ScalarId_MAX = Material_ScalarId_DENSITY;
const int Material_ScalarId_ScalarId_ARRAYSIZE = Material_ScalarId_ScalarId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Material_ScalarId_descriptor();
inline const ::std::string& Material_ScalarId_Name(Material_ScalarId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Material_ScalarId_descriptor(), value);
}
inline bool Material_ScalarId_Parse(
    const ::std::string& name, Material_ScalarId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Material_ScalarId>(
    Material_ScalarId_descriptor(), name, value);
}
enum Material_VectorId {
  Material_VectorId_UNKNOWN_VECTOR = 0,
  Material_VectorId_ENERGY_GROUPS = 1,
  Material_VectorId_CHI = 2,
  Material_VectorId_SIGMA_T = 3,
  Material_VectorId_SIGMA_A = 4,
  Material_VectorId_NU_SIG_F = 5,
  Material_VectorId_KAPPA_SIG_F = 6,
  Material_VectorId_Q = 7,
  Material_VectorId_Material_VectorId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Material_VectorId_Material_VectorId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Material_VectorId_IsValid(int value);
const Material_VectorId Material_VectorId_VectorId_MIN = Material_VectorId_UNKNOWN_VECTOR;
const Material_VectorId Material_VectorId_VectorId_MAX = Material_VectorId_Q;
const int Material_VectorId_VectorId_ARRAYSIZE = Material_VectorId_VectorId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Material_VectorId_descriptor();
inline const ::std::string& Material_VectorId_Name(Material_VectorId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Material_VectorId_descriptor(), value);
}
inline bool Material_VectorId_Parse(
    const ::std::string& name, Material_VectorId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Material_VectorId>(
    Material_VectorId_descriptor(), name, value);
}
enum Material_MatrixId {
  Material_MatrixId_UNKNOWN_MATRIX = 0,
  Material_MatrixId_SIGMA_S = 1,
  Material_MatrixId_Material_MatrixId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Material_MatrixId_Material_MatrixId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Material_MatrixId_IsValid(int value);
const Material_MatrixId Material_MatrixId_MatrixId_MIN = Material_MatrixId_UNKNOWN_MATRIX;
const Material_MatrixId Material_MatrixId_MatrixId_MAX = Material_MatrixId_SIGMA_S;
const int Material_MatrixId_MatrixId_ARRAYSIZE = Material_MatrixId_MatrixId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Material_MatrixId_descriptor();
inline const ::std::string& Material_MatrixId_Name(Material_MatrixId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Material_MatrixId_descriptor(), value);
}
inline bool Material_MatrixId_Parse(
    const ::std::string& name, Material_MatrixId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Material_MatrixId>(
    Material_MatrixId_descriptor(), name, value);
}
// ===================================================================

class Material_ScalarProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Material.ScalarProperty) */ {
 public:
  Material_ScalarProperty();
  virtual ~Material_ScalarProperty();

  Material_ScalarProperty(const Material_ScalarProperty& from);

  inline Material_ScalarProperty& operator=(const Material_ScalarProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material_ScalarProperty(Material_ScalarProperty&& from) noexcept
    : Material_ScalarProperty() {
    *this = ::std::move(from);
  }

  inline Material_ScalarProperty& operator=(Material_ScalarProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material_ScalarProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material_ScalarProperty* internal_default_instance() {
    return reinterpret_cast<const Material_ScalarProperty*>(
               &_Material_ScalarProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Material_ScalarProperty* other);
  friend void swap(Material_ScalarProperty& a, Material_ScalarProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material_ScalarProperty* New() const final {
    return CreateMaybeMessage<Material_ScalarProperty>(NULL);
  }

  Material_ScalarProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material_ScalarProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material_ScalarProperty& from);
  void MergeFrom(const Material_ScalarProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material_ScalarProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // .Material.ScalarId id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::Material_ScalarId id() const;
  void set_id(::Material_ScalarId value);

  // @@protoc_insertion_point(class_scope:Material.ScalarProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  int id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_material_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Material_VectorProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Material.VectorProperty) */ {
 public:
  Material_VectorProperty();
  virtual ~Material_VectorProperty();

  Material_VectorProperty(const Material_VectorProperty& from);

  inline Material_VectorProperty& operator=(const Material_VectorProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material_VectorProperty(Material_VectorProperty&& from) noexcept
    : Material_VectorProperty() {
    *this = ::std::move(from);
  }

  inline Material_VectorProperty& operator=(Material_VectorProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material_VectorProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material_VectorProperty* internal_default_instance() {
    return reinterpret_cast<const Material_VectorProperty*>(
               &_Material_VectorProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Material_VectorProperty* other);
  friend void swap(Material_VectorProperty& a, Material_VectorProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material_VectorProperty* New() const final {
    return CreateMaybeMessage<Material_VectorProperty>(NULL);
  }

  Material_VectorProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material_VectorProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material_VectorProperty& from);
  void MergeFrom(const Material_VectorProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material_VectorProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 2 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // .Material.VectorId id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::Material_VectorId id() const;
  void set_id(::Material_VectorId value);

  // @@protoc_insertion_point(class_scope:Material.VectorProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > value_;
  mutable int _value_cached_byte_size_;
  int id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_material_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Material_MatrixProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Material.MatrixProperty) */ {
 public:
  Material_MatrixProperty();
  virtual ~Material_MatrixProperty();

  Material_MatrixProperty(const Material_MatrixProperty& from);

  inline Material_MatrixProperty& operator=(const Material_MatrixProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material_MatrixProperty(Material_MatrixProperty&& from) noexcept
    : Material_MatrixProperty() {
    *this = ::std::move(from);
  }

  inline Material_MatrixProperty& operator=(Material_MatrixProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material_MatrixProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material_MatrixProperty* internal_default_instance() {
    return reinterpret_cast<const Material_MatrixProperty*>(
               &_Material_MatrixProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Material_MatrixProperty* other);
  friend void swap(Material_MatrixProperty& a, Material_MatrixProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material_MatrixProperty* New() const final {
    return CreateMaybeMessage<Material_MatrixProperty>(NULL);
  }

  Material_MatrixProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material_MatrixProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material_MatrixProperty& from);
  void MergeFrom(const Material_MatrixProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material_MatrixProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 4 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // .Material.MatrixId id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::Material_MatrixId id() const;
  void set_id(::Material_MatrixId value);

  // uint32 rows = 2;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // uint32 cols = 3;
  void clear_cols();
  static const int kColsFieldNumber = 3;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Material.MatrixProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > value_;
  mutable int _value_cached_byte_size_;
  int id_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_material_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Material) */ {
 public:
  Material();
  virtual ~Material();

  Material(const Material& from);

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material(Material&& from) noexcept
    : Material() {
    *this = ::std::move(from);
  }

  inline Material& operator=(Material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material* internal_default_instance() {
    return reinterpret_cast<const Material*>(
               &_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Material* other);
  friend void swap(Material& a, Material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material* New() const final {
    return CreateMaybeMessage<Material>(NULL);
  }

  Material* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material& from);
  void MergeFrom(const Material& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Material_ScalarProperty ScalarProperty;
  typedef Material_VectorProperty VectorProperty;
  typedef Material_MatrixProperty MatrixProperty;

  typedef Material_ScalarId ScalarId;
  static const ScalarId UNKNOWN_SCALAR =
    Material_ScalarId_UNKNOWN_SCALAR;
  static const ScalarId DENSITY =
    Material_ScalarId_DENSITY;
  static inline bool ScalarId_IsValid(int value) {
    return Material_ScalarId_IsValid(value);
  }
  static const ScalarId ScalarId_MIN =
    Material_ScalarId_ScalarId_MIN;
  static const ScalarId ScalarId_MAX =
    Material_ScalarId_ScalarId_MAX;
  static const int ScalarId_ARRAYSIZE =
    Material_ScalarId_ScalarId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScalarId_descriptor() {
    return Material_ScalarId_descriptor();
  }
  static inline const ::std::string& ScalarId_Name(ScalarId value) {
    return Material_ScalarId_Name(value);
  }
  static inline bool ScalarId_Parse(const ::std::string& name,
      ScalarId* value) {
    return Material_ScalarId_Parse(name, value);
  }

  typedef Material_VectorId VectorId;
  static const VectorId UNKNOWN_VECTOR =
    Material_VectorId_UNKNOWN_VECTOR;
  static const VectorId ENERGY_GROUPS =
    Material_VectorId_ENERGY_GROUPS;
  static const VectorId CHI =
    Material_VectorId_CHI;
  static const VectorId SIGMA_T =
    Material_VectorId_SIGMA_T;
  static const VectorId SIGMA_A =
    Material_VectorId_SIGMA_A;
  static const VectorId NU_SIG_F =
    Material_VectorId_NU_SIG_F;
  static const VectorId KAPPA_SIG_F =
    Material_VectorId_KAPPA_SIG_F;
  static const VectorId Q =
    Material_VectorId_Q;
  static inline bool VectorId_IsValid(int value) {
    return Material_VectorId_IsValid(value);
  }
  static const VectorId VectorId_MIN =
    Material_VectorId_VectorId_MIN;
  static const VectorId VectorId_MAX =
    Material_VectorId_VectorId_MAX;
  static const int VectorId_ARRAYSIZE =
    Material_VectorId_VectorId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VectorId_descriptor() {
    return Material_VectorId_descriptor();
  }
  static inline const ::std::string& VectorId_Name(VectorId value) {
    return Material_VectorId_Name(value);
  }
  static inline bool VectorId_Parse(const ::std::string& name,
      VectorId* value) {
    return Material_VectorId_Parse(name, value);
  }

  typedef Material_MatrixId MatrixId;
  static const MatrixId UNKNOWN_MATRIX =
    Material_MatrixId_UNKNOWN_MATRIX;
  static const MatrixId SIGMA_S =
    Material_MatrixId_SIGMA_S;
  static inline bool MatrixId_IsValid(int value) {
    return Material_MatrixId_IsValid(value);
  }
  static const MatrixId MatrixId_MIN =
    Material_MatrixId_MatrixId_MIN;
  static const MatrixId MatrixId_MAX =
    Material_MatrixId_MatrixId_MAX;
  static const int MatrixId_ARRAYSIZE =
    Material_MatrixId_MatrixId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatrixId_descriptor() {
    return Material_MatrixId_descriptor();
  }
  static inline const ::std::string& MatrixId_Name(MatrixId value) {
    return Material_MatrixId_Name(value);
  }
  static inline bool MatrixId_Parse(const ::std::string& name,
      MatrixId* value) {
    return Material_MatrixId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Material.ScalarProperty scalar_property = 6;
  int scalar_property_size() const;
  void clear_scalar_property();
  static const int kScalarPropertyFieldNumber = 6;
  ::Material_ScalarProperty* mutable_scalar_property(int index);
  ::google::protobuf::RepeatedPtrField< ::Material_ScalarProperty >*
      mutable_scalar_property();
  const ::Material_ScalarProperty& scalar_property(int index) const;
  ::Material_ScalarProperty* add_scalar_property();
  const ::google::protobuf::RepeatedPtrField< ::Material_ScalarProperty >&
      scalar_property() const;

  // repeated .Material.VectorProperty vector_property = 7;
  int vector_property_size() const;
  void clear_vector_property();
  static const int kVectorPropertyFieldNumber = 7;
  ::Material_VectorProperty* mutable_vector_property(int index);
  ::google::protobuf::RepeatedPtrField< ::Material_VectorProperty >*
      mutable_vector_property();
  const ::Material_VectorProperty& vector_property(int index) const;
  ::Material_VectorProperty* add_vector_property();
  const ::google::protobuf::RepeatedPtrField< ::Material_VectorProperty >&
      vector_property() const;

  // repeated .Material.MatrixProperty matrix_property = 8;
  int matrix_property_size() const;
  void clear_matrix_property();
  static const int kMatrixPropertyFieldNumber = 8;
  ::Material_MatrixProperty* mutable_matrix_property(int index);
  ::google::protobuf::RepeatedPtrField< ::Material_MatrixProperty >*
      mutable_matrix_property();
  const ::Material_MatrixProperty& matrix_property(int index) const;
  ::Material_MatrixProperty* add_matrix_property();
  const ::google::protobuf::RepeatedPtrField< ::Material_MatrixProperty >&
      matrix_property() const;

  // string full_name = 1;
  void clear_full_name();
  static const int kFullNameFieldNumber = 1;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // string abbreviation = 2;
  void clear_abbreviation();
  static const int kAbbreviationFieldNumber = 2;
  const ::std::string& abbreviation() const;
  void set_abbreviation(const ::std::string& value);
  #if LANG_CXX11
  void set_abbreviation(::std::string&& value);
  #endif
  void set_abbreviation(const char* value);
  void set_abbreviation(const char* value, size_t size);
  ::std::string* mutable_abbreviation();
  ::std::string* release_abbreviation();
  void set_allocated_abbreviation(::std::string* abbreviation);

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 number_of_groups = 4;
  void clear_number_of_groups();
  static const int kNumberOfGroupsFieldNumber = 4;
  ::google::protobuf::uint32 number_of_groups() const;
  void set_number_of_groups(::google::protobuf::uint32 value);

  // uint32 thermal_groups = 5;
  void clear_thermal_groups();
  static const int kThermalGroupsFieldNumber = 5;
  ::google::protobuf::uint32 thermal_groups() const;
  void set_thermal_groups(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Material_ScalarProperty > scalar_property_;
  ::google::protobuf::RepeatedPtrField< ::Material_VectorProperty > vector_property_;
  ::google::protobuf::RepeatedPtrField< ::Material_MatrixProperty > matrix_property_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::google::protobuf::internal::ArenaStringPtr abbreviation_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 number_of_groups_;
  ::google::protobuf::uint32 thermal_groups_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_material_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Material_ScalarProperty

// .Material.ScalarId id = 1;
inline void Material_ScalarProperty::clear_id() {
  id_ = 0;
}
inline ::Material_ScalarId Material_ScalarProperty::id() const {
  // @@protoc_insertion_point(field_get:Material.ScalarProperty.id)
  return static_cast< ::Material_ScalarId >(id_);
}
inline void Material_ScalarProperty::set_id(::Material_ScalarId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Material.ScalarProperty.id)
}

// double value = 2;
inline void Material_ScalarProperty::clear_value() {
  value_ = 0;
}
inline double Material_ScalarProperty::value() const {
  // @@protoc_insertion_point(field_get:Material.ScalarProperty.value)
  return value_;
}
inline void Material_ScalarProperty::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Material.ScalarProperty.value)
}

// -------------------------------------------------------------------

// Material_VectorProperty

// .Material.VectorId id = 1;
inline void Material_VectorProperty::clear_id() {
  id_ = 0;
}
inline ::Material_VectorId Material_VectorProperty::id() const {
  // @@protoc_insertion_point(field_get:Material.VectorProperty.id)
  return static_cast< ::Material_VectorId >(id_);
}
inline void Material_VectorProperty::set_id(::Material_VectorId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Material.VectorProperty.id)
}

// repeated double value = 2 [packed = true];
inline int Material_VectorProperty::value_size() const {
  return value_.size();
}
inline void Material_VectorProperty::clear_value() {
  value_.Clear();
}
inline double Material_VectorProperty::value(int index) const {
  // @@protoc_insertion_point(field_get:Material.VectorProperty.value)
  return value_.Get(index);
}
inline void Material_VectorProperty::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:Material.VectorProperty.value)
}
inline void Material_VectorProperty::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:Material.VectorProperty.value)
}
inline const ::google::protobuf::RepeatedField< double >&
Material_VectorProperty::value() const {
  // @@protoc_insertion_point(field_list:Material.VectorProperty.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
Material_VectorProperty::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Material.VectorProperty.value)
  return &value_;
}

// -------------------------------------------------------------------

// Material_MatrixProperty

// .Material.MatrixId id = 1;
inline void Material_MatrixProperty::clear_id() {
  id_ = 0;
}
inline ::Material_MatrixId Material_MatrixProperty::id() const {
  // @@protoc_insertion_point(field_get:Material.MatrixProperty.id)
  return static_cast< ::Material_MatrixId >(id_);
}
inline void Material_MatrixProperty::set_id(::Material_MatrixId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Material.MatrixProperty.id)
}

// uint32 rows = 2;
inline void Material_MatrixProperty::clear_rows() {
  rows_ = 0u;
}
inline ::google::protobuf::uint32 Material_MatrixProperty::rows() const {
  // @@protoc_insertion_point(field_get:Material.MatrixProperty.rows)
  return rows_;
}
inline void Material_MatrixProperty::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:Material.MatrixProperty.rows)
}

// uint32 cols = 3;
inline void Material_MatrixProperty::clear_cols() {
  cols_ = 0u;
}
inline ::google::protobuf::uint32 Material_MatrixProperty::cols() const {
  // @@protoc_insertion_point(field_get:Material.MatrixProperty.cols)
  return cols_;
}
inline void Material_MatrixProperty::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:Material.MatrixProperty.cols)
}

// repeated double value = 4 [packed = true];
inline int Material_MatrixProperty::value_size() const {
  return value_.size();
}
inline void Material_MatrixProperty::clear_value() {
  value_.Clear();
}
inline double Material_MatrixProperty::value(int index) const {
  // @@protoc_insertion_point(field_get:Material.MatrixProperty.value)
  return value_.Get(index);
}
inline void Material_MatrixProperty::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:Material.MatrixProperty.value)
}
inline void Material_MatrixProperty::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:Material.MatrixProperty.value)
}
inline const ::google::protobuf::RepeatedField< double >&
Material_MatrixProperty::value() const {
  // @@protoc_insertion_point(field_list:Material.MatrixProperty.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
Material_MatrixProperty::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Material.MatrixProperty.value)
  return &value_;
}

// -------------------------------------------------------------------

// Material

// string full_name = 1;
inline void Material::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material::full_name() const {
  // @@protoc_insertion_point(field_get:Material.full_name)
  return full_name_.GetNoArena();
}
inline void Material::set_full_name(const ::std::string& value) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Material.full_name)
}
#if LANG_CXX11
inline void Material::set_full_name(::std::string&& value) {
  
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Material.full_name)
}
#endif
inline void Material::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Material.full_name)
}
inline void Material::set_full_name(const char* value, size_t size) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Material.full_name)
}
inline ::std::string* Material::mutable_full_name() {
  
  // @@protoc_insertion_point(field_mutable:Material.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material::release_full_name() {
  // @@protoc_insertion_point(field_release:Material.full_name)
  
  return full_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:Material.full_name)
}

// string abbreviation = 2;
inline void Material::clear_abbreviation() {
  abbreviation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material::abbreviation() const {
  // @@protoc_insertion_point(field_get:Material.abbreviation)
  return abbreviation_.GetNoArena();
}
inline void Material::set_abbreviation(const ::std::string& value) {
  
  abbreviation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Material.abbreviation)
}
#if LANG_CXX11
inline void Material::set_abbreviation(::std::string&& value) {
  
  abbreviation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Material.abbreviation)
}
#endif
inline void Material::set_abbreviation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  abbreviation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Material.abbreviation)
}
inline void Material::set_abbreviation(const char* value, size_t size) {
  
  abbreviation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Material.abbreviation)
}
inline ::std::string* Material::mutable_abbreviation() {
  
  // @@protoc_insertion_point(field_mutable:Material.abbreviation)
  return abbreviation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material::release_abbreviation() {
  // @@protoc_insertion_point(field_release:Material.abbreviation)
  
  return abbreviation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material::set_allocated_abbreviation(::std::string* abbreviation) {
  if (abbreviation != NULL) {
    
  } else {
    
  }
  abbreviation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abbreviation);
  // @@protoc_insertion_point(field_set_allocated:Material.abbreviation)
}

// string id = 3;
inline void Material::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material::id() const {
  // @@protoc_insertion_point(field_get:Material.id)
  return id_.GetNoArena();
}
inline void Material::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Material.id)
}
#if LANG_CXX11
inline void Material::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Material.id)
}
#endif
inline void Material::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Material.id)
}
inline void Material::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Material.id)
}
inline ::std::string* Material::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Material.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material::release_id() {
  // @@protoc_insertion_point(field_release:Material.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Material.id)
}

// uint32 number_of_groups = 4;
inline void Material::clear_number_of_groups() {
  number_of_groups_ = 0u;
}
inline ::google::protobuf::uint32 Material::number_of_groups() const {
  // @@protoc_insertion_point(field_get:Material.number_of_groups)
  return number_of_groups_;
}
inline void Material::set_number_of_groups(::google::protobuf::uint32 value) {
  
  number_of_groups_ = value;
  // @@protoc_insertion_point(field_set:Material.number_of_groups)
}

// uint32 thermal_groups = 5;
inline void Material::clear_thermal_groups() {
  thermal_groups_ = 0u;
}
inline ::google::protobuf::uint32 Material::thermal_groups() const {
  // @@protoc_insertion_point(field_get:Material.thermal_groups)
  return thermal_groups_;
}
inline void Material::set_thermal_groups(::google::protobuf::uint32 value) {
  
  thermal_groups_ = value;
  // @@protoc_insertion_point(field_set:Material.thermal_groups)
}

// repeated .Material.ScalarProperty scalar_property = 6;
inline int Material::scalar_property_size() const {
  return scalar_property_.size();
}
inline void Material::clear_scalar_property() {
  scalar_property_.Clear();
}
inline ::Material_ScalarProperty* Material::mutable_scalar_property(int index) {
  // @@protoc_insertion_point(field_mutable:Material.scalar_property)
  return scalar_property_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Material_ScalarProperty >*
Material::mutable_scalar_property() {
  // @@protoc_insertion_point(field_mutable_list:Material.scalar_property)
  return &scalar_property_;
}
inline const ::Material_ScalarProperty& Material::scalar_property(int index) const {
  // @@protoc_insertion_point(field_get:Material.scalar_property)
  return scalar_property_.Get(index);
}
inline ::Material_ScalarProperty* Material::add_scalar_property() {
  // @@protoc_insertion_point(field_add:Material.scalar_property)
  return scalar_property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Material_ScalarProperty >&
Material::scalar_property() const {
  // @@protoc_insertion_point(field_list:Material.scalar_property)
  return scalar_property_;
}

// repeated .Material.VectorProperty vector_property = 7;
inline int Material::vector_property_size() const {
  return vector_property_.size();
}
inline void Material::clear_vector_property() {
  vector_property_.Clear();
}
inline ::Material_VectorProperty* Material::mutable_vector_property(int index) {
  // @@protoc_insertion_point(field_mutable:Material.vector_property)
  return vector_property_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Material_VectorProperty >*
Material::mutable_vector_property() {
  // @@protoc_insertion_point(field_mutable_list:Material.vector_property)
  return &vector_property_;
}
inline const ::Material_VectorProperty& Material::vector_property(int index) const {
  // @@protoc_insertion_point(field_get:Material.vector_property)
  return vector_property_.Get(index);
}
inline ::Material_VectorProperty* Material::add_vector_property() {
  // @@protoc_insertion_point(field_add:Material.vector_property)
  return vector_property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Material_VectorProperty >&
Material::vector_property() const {
  // @@protoc_insertion_point(field_list:Material.vector_property)
  return vector_property_;
}

// repeated .Material.MatrixProperty matrix_property = 8;
inline int Material::matrix_property_size() const {
  return matrix_property_.size();
}
inline void Material::clear_matrix_property() {
  matrix_property_.Clear();
}
inline ::Material_MatrixProperty* Material::mutable_matrix_property(int index) {
  // @@protoc_insertion_point(field_mutable:Material.matrix_property)
  return matrix_property_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Material_MatrixProperty >*
Material::mutable_matrix_property() {
  // @@protoc_insertion_point(field_mutable_list:Material.matrix_property)
  return &matrix_property_;
}
inline const ::Material_MatrixProperty& Material::matrix_property(int index) const {
  // @@protoc_insertion_point(field_get:Material.matrix_property)
  return matrix_property_.Get(index);
}
inline ::Material_MatrixProperty* Material::add_matrix_property() {
  // @@protoc_insertion_point(field_add:Material.matrix_property)
  return matrix_property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Material_MatrixProperty >&
Material::matrix_property() const {
  // @@protoc_insertion_point(field_list:Material.matrix_property)
  return matrix_property_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Material_ScalarId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Material_ScalarId>() {
  return ::Material_ScalarId_descriptor();
}
template <> struct is_proto_enum< ::Material_VectorId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Material_VectorId>() {
  return ::Material_VectorId_descriptor();
}
template <> struct is_proto_enum< ::Material_MatrixId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Material_MatrixId>() {
  return ::Material_MatrixId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_material_2eproto
